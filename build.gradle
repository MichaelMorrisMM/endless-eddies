/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
plugins {
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'java'

def serverDir = System.getenv("CATALINA_HOME")
def deployPath = serverDir + "/webapps/" + rootProject.name
def javaDestPath = deployPath + "/WEB-INF/classes"
def serverLibPath = serverDir + "/lib"

dependencies {
    compile fileTree(dir: "libs", include: "**/*.jar")
}

task deployAll(type: GradleBuild) {
    tasks = ["cleanAll", "deployJava", "deployAngular"]
}

task cleanAll(type: GradleBuild) {
    tasks = ["clean", "cleanDeployment", "cleanAngular"]
}

task cleanProject(type: GradleBuild) {
    tasks = ["clean", "cleanAngular"]
}

task cleanDeployment(type: Delete) {
    delete new File(deployPath)
}

task cleanAngular(type: Delete) {
    delete "dist"
}

task cleanJavaDeploy(type: Delete) {
    delete new File(javaDestPath)
}

task deployLibs(type: Copy) {
    from "libs"
    into serverLibPath
    include "**/*.jar"
    eachFile {
        if (it.relativePath.getFile(destinationDir).exists()) {
            it.exclude()
        }
    }
}

task seedDeployment {
    def deploy = new File(deployPath)
    if (!deploy.exists()) {
        deploy.mkdirs()
    }
}

task seedJava {
    def javaDest = new File(javaDestPath)
    if (!javaDest.exists()) {
        javaDest.mkdirs()
    }
}

task deployJava(type: Copy) {
    from sourceSets.main.output.classesDirs
    into javaDestPath
}
deployJava.dependsOn deployLibs, cleanJavaDeploy, seedJava, classes

npm_run_build {
    args = [rootDir]
}
npm_build.dependsOn npmInstall

task deployAngular(type: Copy) {
    from "dist"
    into deployPath
}
deployAngular.dependsOn seedDeployment, npm_run_build

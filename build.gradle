/*
 * This is the endless eddies build config
 */
plugins {
    id 'com.github.gmazzo.sqlite' version '0.2'
    id 'com.moowork.node' version '1.2.0'
    id 'war'
    id 'org.jetbrains.kotlin.jvm' version '1.2.71'
}

def confDir = System.getenv('ENDLESS_EDDIES_CONFIG_DIR')
def serverDir = System.getenv('CATALINA_HOME')
def javaHome = System.getenv('JAVA_HOME')
def deployPath = serverDir + '/webapps/' + rootProject.name
def javaDestPath = deployPath + '/WEB-INF/classes'
def serverLibPath = deployPath + '/WEB-INF/lib'
def databaseName = 'endless_eddies.db'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.auth0:java-jwt:3.4.0'
    implementation 'com.google.api-client:google-api-client:1.25.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.6'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.glassfish:javax.json:1.1.2'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.xerial:sqlite-jdbc:3.23.1'
}

task cleanAll(type: GradleBuild) {
    tasks = ['cleanProject', 'cleanDeployment', 'cleanWar']
}

task cleanProject(type: GradleBuild) {
    tasks = ['clean', 'cleanAngular']
}

task cleanDeployment(type: Delete) {
    delete file(deployPath)
}

task cleanWar(type: Delete) {
    delete new File(deployPath + '.war')
}

task cleanAngular(type: Delete) {
    delete 'dist'
}

task cleanJavaDeploy(type: Delete) {
    delete file(javaDestPath)
}

task seedLibs {
    doLast {
        mkdir serverLibPath
    }
}

task deployLibs(type: Copy) {
    from configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }
    into serverLibPath
    eachFile {
        if (it.relativePath.getFile(destinationDir).exists()) {
            it.exclude()
        }
    }
    dependsOn seedLibs
}

task seedDeployment {
    doLast {
        mkdir deployPath
    }
}

task seedJava {
    doLast {
        mkdir javaDestPath
    }
}

task deployJava(type: Copy) {
    from sourceSets.main.output.classesDirs
    into javaDestPath
    dependsOn deployLibs, cleanJavaDeploy, seedJava, classes
}

npm_run_build.dependsOn npmInstall

task deployAngular(type: Copy) {
    from 'dist'
    into deployPath
    dependsOn seedDeployment, npm_run_build
}

war {
    from 'dist'
    dependsOn npm_run_build
}

task deployWar(type: Copy) {
    from "$buildDir/libs"
    into serverDir + '/webapps/'
    include '*.war'
    dependsOn war, cleanDeployment
}

sqlite {
    driverDependency 'org.xerial:sqlite-jdbc:3.23.1'
}

task makeDatabase {
    def databaseFile = file("$buildDir/database/$databaseName")

    doLast {
        def db = openSQLiteDatabase(databaseFile)
        db.execute 'DROP TABLE IF EXISTS user'
        db.execute '''CREATE TABLE user(
                        idUser      INTEGER         PRIMARY KEY,
                        email       VARCHAR(320)    NOT NULL UNIQUE,
                        password    VARCHAR(100)    NOT NULL,
                        salt        VARCHAR(150)    NOT NULL,
                        isAdmin     CHAR(1)         NOT NULL
                   )'''
        db.execute 'DROP TABLE IF EXISTS request'
        db.execute '''CREATE TABLE request(
                        idRequest   INTEGER         PRIMARY KEY,
                        name        VARCHAR(100)    NOT NULL UNIQUE,
                        idUser      INTEGER,
                        idGuest     INTEGER,
                        date        VARCHAR(30)     NOT NULL,
                        expiration  INTEGER,
                        FOREIGN KEY(idUser) REFERENCES user(idUser)
                   )'''
    }
}

task deployDatabase(type: Copy) {
    from "$buildDir/database/$databaseName"
    into "$confDir"
    dependsOn makeDatabase
}

task buildDockerImage(type: Exec) {
    dependsOn war, makeDatabase
    commandLine 'docker', 'build', '-t', 'endless-eddies', '.'
}

task createSelfSignedCert(type: Exec) {
    commandLine "$javaHome/bin/keytool",
        '-genkey',
        '-alias', 'tomcat',
        '-keyalg', 'RSA',
        '-keystore', "$serverDir/conf/localhost-rsa.jks",
        '-keypass', 'changeit',
        '-storepass', 'changeit',
        '-dname', 'CN=EndlessEddies'
    doLast {
        println """
Keystore Created:
Add the following Connector tag to $serverDir/conf/server.xml within the <Service name="Catalina"> tag

<Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol" maxThreads="150" SSLEnabled="true">
    <SSLHostConfig>
        <Certificate certificateKeystoreFile="conf/localhost-rsa.jks" type="RSA" />
    </SSLHostConfig>
</Connector>

Detailed Tomcat SSL Documentation: https://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html
    """
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

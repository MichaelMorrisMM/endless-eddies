/*
 * This is the endless eddies build config
 */
plugins {
    id 'com.github.gmazzo.sqlite' version '0.2'
    id 'com.moowork.node' version '1.2.0'
    id 'java'
}

def confDir = System.getenv('ENDLESS_EDDIES_CONFIG_DIR')
def serverDir = System.getenv('CATALINA_HOME')
def deployPath = serverDir + '/webapps/' + rootProject.name
def javaDestPath = deployPath + '/WEB-INF/classes'
def serverLibPath = serverDir + '/lib'

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '**/*.jar')
    compile 'com.auth0:java-jwt:3.3.0'
}

task deployAll(type: GradleBuild) {
    tasks = ['cleanAll', 'deployJava', 'deployAngular']
}

task cleanAll(type: GradleBuild) {
    tasks = ['clean', 'cleanDeployment', 'cleanAngular']
}

task cleanProject(type: GradleBuild) {
    tasks = ['clean', 'cleanAngular']
}

task cleanDeployment(type: Delete) {
    delete new File(deployPath)
}

task cleanAngular(type: Delete) {
    delete 'dist'
}

task cleanJavaDeploy(type: Delete) {
    delete new File(javaDestPath)
}

task deployLibs(type: Copy) {
    from 'libs'
    into serverLibPath
    include '**/*.jar'
    eachFile {
        if (it.relativePath.getFile(destinationDir).exists()) {
            it.exclude()
        }
    }
}

task seedDeployment {
    def deploy = new File(deployPath)
    if (!deploy.exists()) {
        deploy.mkdirs()
    }
}

task seedJava {
    def javaDest = new File(javaDestPath)
    if (!javaDest.exists()) {
        javaDest.mkdirs()
    }
}

task deployJava(type: Copy) {
    from sourceSets.main.output.classesDirs
    into javaDestPath
}
deployJava.dependsOn deployLibs, cleanJavaDeploy, seedJava, classes

npm_run_build.dependsOn npmInstall

task deployAngular(type: Copy) {
    from 'dist'
    into deployPath
}
deployAngular.dependsOn seedDeployment, npm_run_build

sqlite {
    driverDependency 'org.xerial:sqlite-jdbc:3.23.1'
}

task makeDatabase {
    def databaseFile = file("$confDir/endless_eddies.db")

    outputs.file databaseFile

    doLast {
        def db = openSQLiteDatabase(databaseFile)
        db.execute 'DROP TABLE IF EXISTS user'
        db.execute '''CREATE TABLE user(
                        idUser      INTEGER         PRIMARY KEY,
                        email       VARCHAR(320)    NOT NULL UNIQUE,
                        password    VARCHAR(100)    NOT NULL,
                        salt        VARCHAR(150)    NOT NULL,
                        isAdmin     CHAR(1)         NOT NULL
                   )'''
        db.execute 'DROP TABLE IF EXISTS request'
        db.execute '''CREATE TABLE request(
                        idRequest   INTEGER         PRIMARY KEY,
                        name        VARCHAR(100)    NOT NULL UNIQUE,
                        idUser      INTEGER,
                        idGuest     INTEGER,
                        date        VARCHAR(30)     NOT NULL,
                        expiration  INTEGER,
                        FOREIGN KEY(idUser) REFERENCES user(idUser)
                   )'''
    }
}